#+TITLE:Org Cheatsheat
# The next lines says that I can make 10 levels of headlines, and org will treat those headlines as how to structure the book into

# chapters, then sections, then subsections, then sub-sub-sections, etc.
#+OPTIONS: H:10 toc: nil

* Movement commands
  * ~C-c C-n~ Next heading
  * ~C-c C-p~ Previous heading
  * ~C-c C-u~ backward to a higher level heading
  * ~C-c C-j~  org-goto...it is super nice!!
* Getting familiar with org-agenda
** commands
   - ~v d~  or ~d~  shows’ today’s agenda
   - ~v w~  or ~w~ shows this week’s agenda
   - ~v m~  view this month’s agenda
   - ~v t~  shows the fortnight
   - ~.~  goto today’s agenda
   - ~j~  goto a specified date
   - ~J~ goto the currently clocked in task
   - ~v c~  shows you overlapping clock entries
   - ~r~ redraw the agenda buffer
   - ~C-k~  kill the current agenda item in the agenda buffer and in the file
   - ~C-c C-w~ refile the entry
   - ~T~ show the tags of an entry
   - ~:~ set the tags for the current entry
   - ~,~  set the priority of the item
   - ~P~  show the priority of the item
   - ~+~ Increase its priority
   - ~-~ minus its priority
   - ~z~ add a note to the entry
   - ~>~ change the timestamp with that entry
   - ~I~ clock in on an entry
   -  ~O~ clockout on an entry
   - ~X~ cancel the current running clock
   - ~m~ mark the entry at point
   - ~u~ undo the marked point
   -  ~U~ unmark all marked entries
   - ~%~ mark via regexp
** views
   - (org-agenda-log-mode)  enteries that were marked done while logging was on, are shone in hte agenda, as are
     entries that have been clocked today.
   - (org-agenda-clockreport-mode) the agenda view will show a table with all your currently clocked time on tasks.
   - (org-agenda-entry-text-mode)
* export to HTML
* Org babel
  Org babel allows you to insert code blocks into a document.  Those code block's results, can be /weaved/ to html, latex, info,
  etc OR that code can be /tangled/ to be later run by a computer!  It super cool because inside one emacs buffer, you can be writing
  a program that uses 30 different languages, and each block's results can be used as input to any other block!
** An sql example
    :PROPERTIES:
    :engine: mysql
    :dbhost: localhost
    :dbuser: root
    :dbpassword: <your password here>
    :database: usbc
    :END:

    #+name: my_query
    #+BEGIN_SRC sql
      SELECT first, last FROM users WHERE last = 'Branson' limit 5
    #+END_SRC

    #+RESULTS: my_query
    | first  | last    |
    |--------+---------|
    | Joshua | Branson |
    | Joshua | Branson |
    | Joshua | Branson |
    | Joshua | Branson |

    That "my_query" block can be passed as input to the following code block
    #+BEGIN_SRC emacs-lisp :var x=my_query
      (print x)

    #+END_SRC

    #+RESULTS:
    | Joshua | Branson |
    | Joshua | Branson |
    | Joshua | Branson |
    | Joshua | Branson |

    One can also tell emacs NOT to export the results of a code execution via
    #+BEGIN_SRC emacs-lisp :exports none
      (print "hello")
    #+END_SRC

    #+RESULTS:
    : hello



* Easy Templates
  Org mode supports insertion of empty structural elements (like #+BEGIN_SRC and #+END_SRC pairs) with just a few key strokes. This is achieved through a native template expansion mechanism. Note that Emacs has several other template mechanisms which could be used in a similar way, for example yasnippet.

To insert a structural element, type a ‘<’, followed by a template selector and <TAB>. Completion takes effect only when the above keystrokes are typed on a line by itself.

The following template selectors are currently supported.

s	#+BEGIN_SRC ... #+END_SRC
e	#+BEGIN_EXAMPLE ... #+END_EXAMPLE
q	#+BEGIN_QUOTE ... #+END_QUOTE
v	#+BEGIN_VERSE ... #+END_VERSE
c	#+BEGIN_CENTER ... #+END_CENTER
l	#+BEGIN_LaTeX ... #+END_LaTeX
L	#+LaTeX:
h	#+BEGIN_HTML ... #+END_HTML
H	#+HTML:
a	#+BEGIN_ASCII ... #+END_ASCII
A	#+ASCII:
i	#+INDEX: line
I	#+INCLUDE: line
For example, on an empty line, typing "<e" and then pressing TAB, will expand into a complete EXAMPLE template.

You can install additional templates by customizing the variable org-structure-template-alist. See the docstring of the variable for additional details.

 the query up!
** 4.22.9 IN and NOT IN
   SELECT id
   FROM stats
   WHERE position IN ('Manager', 'Staff')
   SELECT ownerid, 'is in both orders & antiques'
   FROM orders, antiques WHERE ownerid = buyerid
   UNION
   SELECT buyerid, 'is in antiques only'
   FROM antiques WHERE buyerid NOT IN (SELECT ownerid FROM orders)
** 4.22.10 EXISTS and ALL
   (Compatible: Mysql 4+)
   SELECT ownerfirstname, ownerlastname
   FROM owner
   WHERE EXISTS (SELECT * FROM antiques WHERE item = 'chair')
   SELECT buyerid, item
   FROM antiques
   WHERE price = ALL (SELECT price FROM antiques)

** UNION == UNION DISTINCT
   UNION ALL shows you duplicate values
** JOINS
    :PROPERTIES:
    :engine: mysql
    :dbhost: setyourwaypoint.com
    :dbuser: ihsb_admin
    :dbpassword: 7o Be or No7 to 13e
    :database: ihsb_indianaBowling
    :END:
*** cartesian joins you join every row of one table to every row of another table
*** left Joins
    Left joins allow one to combine the results from two different tables in one query.  It will only display show matching
    records.  In the following case, it will only display records where a kid's address is the same as his parents.

    SELECT first, last, parents.address from kids
    LEFT join parents on users.address = parents.address

    It includes


    #+BEGIN_SRC sql
      SELECT bowlers.first, bowlers.last, bowlers.ID, level, bowlers.schoolID,  usbcData.usbc, usbcData.year,
      bowlerImages.ID as sig, activationEmail.ID as act
      FROM bowlers
      LEFT JOIN usbcData ON bowlers.usbc=usbcData.usbc
      LEFT JOIN bowlerImages ON bowlers.ID = bowlerImages.ID
      LEFT JOIN activationEmail on bowlers.ID = activationEmail.ID
      WHERE (teamID = 790) AND (level = '1')
      AND (bowlers.schoolID = 789)
      ORDER BY bowlers.last
    #+END_SRC

    #+RESULTS:
    | first   | last    |  ID | level | schoolID | usbc       | year | sig | act  |
    |---------+---------+-----+-------+----------+------------+------+-----+------|
    | Jake    | Arthur  | 546 |     1 |      789 | 7914-12959 | 2016 | 546 | NULL |
    | Dakota  | Deibel  | 899 |     1 |      789 | NULL       | NULL | 899 | NULL |
    | Cameron | Johnson | 545 |     1 |      789 | NULL       | NULL | 545 | NULL |
*** inner joins

does not include null values
** subqueries
   https://dev.mysql.com/doc/refman/5.0/en/subqueries.html
   Subqueries appear in the where or having clause, as a result in the select statement, in the FROM clause
   a subquery can only product a single column of data as a result. Order by is not allowed, doesn't make sense

   to find girls with the same last name as the boys
   SELECT * from girls WHERE last = (SELEct last from boys)

   how find a coach a little better
   select ID from bowlers WHERE level IN ('3', '6')
   verses
   SELEct ID from bowlers WHERE level = '3' and level = '6'

   How to find all non coaches
   SELEct ID from bowlers WHERE level NOT IN ('3', '6')
** LIKE
   like has 2 special charters
   "%" represents any sequence of chars
   "_" means any 1 char

   SELEcT girls from bowlers WHERE last LIKE 'SM_TH'
   LIKE also works with numbers
   SELEct ID from bowlers WHERE ID LIKE '_2%'
   it will select 123434 or 223434 or 4222323
** SOUNDS LIKE can check if two words sound similiar! wow!
   SELEcT first from girls WHERE first SOUNDS LIKE 'karlie'
** regexp
   SELEct 'string' REGEXP pattern
** LOAD DATA INFILE '/path/to/file' INTO TABLE usbcData
** GREATEST (value1, value2, value3)
** LEAST (value1, value2, value3)
   returns the smallest value
** IF (val1, val2, val3)
   if val1 is true, then it returns value1. Otherwise it returns val3
** SELECT MAX(LENGTH(CONCAT(‘first_name‘, ' ', ‘last_name‘))) FROM ‘subscribers‘
** user defined variables! holy cow!
   You can write one query and save the results in a sql variable!  Then you can refer to that variable in the union clause!

   SELECT ID, first, last, schools.schoolID, level, @groupID := schools.groupID as groupID
   FROM users LEFT JOIN schools on users.schoolID=schools.schoolID
   WHERE (level = '3' OR level = '6' OR level = '9') AND (ID = '3')
   UNION ALL SELECT ID, first, last, schoolID, level, schoolID as groupID from users
   WHERE level = '2' AND schoolID = @groupID

   You can get even crazier by defining sql variables that can be used as subqueries

    #+BEGIN_SRC sql
    SELECT users.first, users.last, users.ID, @schoolID := users.schoolID as schoolID, images.ID
    as sig, schools.schoolID,  @groupID := (SELECT groupID FROM schools WHERE schoolID = @schoolID) as groupID,
    (SELECT region FROM conference WHERE groupID = @groupID) as region
    FROM users
    LEFT JOIN schools    ON users.schoolID=schools.schoolID
    LEFT JOIN images     ON users.ID=images.ID
    WHERE (level = '6' OR level = '3') limit 10
    #+END_SRC

    #+RESULTS:
    | first     | last      |  ID | schoolID | sig | schoolID | groupID | region              |
    |-----------+-----------+-----+----------+-----+----------+---------+---------------------|
    | Stephanie | Cooley    |  92 |      714 |  92 |      714 |       1 | Testing Conference  |
    | Janee     | Babbitt   |  93 |       84 |  93 |       84 |      50 | Greater Lake County |
    | Linda     | Olszewski |  95 |       79 |  95 |       79 |      50 | Greater Lake County |
    | Edward    | Olszewski |  96 |       79 |  96 |       79 |      50 | Greater Lake County |
    | Christine | Munsie    |  97 |       89 |  97 |       89 |      50 | Greater Lake County |
    | Patrick   | Cobban    |  98 |       89 |  98 |       89 |      50 | Greater Lake County |
    | Derrick   | Bohn      |  99 |      109 |  99 |      109 |      50 | Greater Lake County |
    | Russell   | Klosinski | 107 |      184 | 107 |      184 |      55 | Michiana Central    |
    | Tami      | Nedza     | 112 |      119 | 112 |      119 |      55 | Michiana Central    |
    | Richard   | Hughey    | 114 |      114 | 114 |      114 |      56 | Michiana West       |
** make table names be subqueries

 #+BEGIN_SRC sql
   SELECT
   (SELECT groupID users) as users
   (SELECT groupID bowlers) as bowlers
   WHERE users.ID = bowlers.groupID
 #+END_SRC
** if statements normally are done inside a query

 #+BEGIN_SRC sql
   DELETE
 #+END_SRC

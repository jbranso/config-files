#+TITLE:SQL Cheatsheat
# The next lines says that I can make 10 levels of headlines, and org will treat those headlines as how to structure the book into

# chapters, then sections, then subsections, then sub-sub-sections, etc.
#+OPTIONS: H:10

# This next line says that the table of contents should mention the chapters and the chapter sections.
#+OPTIONS: toc:2
* SQL Cheatsheat
** connecting to a database via the terminal
   ~$ mysql -h host -u <user> -p~

   ~Enter password: ********~

   ~MariaDB> USE <table_name>~

   ~MariaDB table_name>~


   Now you can make calls to the database like this


   ~MariaDB table_name>SELECT * FROM people~
** Select Syntax
   Note this is not the complete SELECT syntax; instead, it is a simplication. See the SQL documentation here for the complete
   syntax: http://dev.mysql.com/doc/refman/5.6/en/select.html
   SELECT

   select_expr [, select_expr ...]

   [FROM table_references

   [WHERE where_condition]

   [GROUP BY {col_name | expr | position}

      [ASC | DESC]]

   [ORDER BY {col_name | expr | position}

      [ASC | DESC]]

   [LIMIT {[offset,] row_count | row_count OFFSET offset}]]

   * select_expr indicates a column you wish to retrieve.

   * table_references indicates the table of tables from which to retrieve rows
** LIMIT is particularly useful for SELECTs which use ORDER BY, DISTINCT and
   GROUP BY, because their calculations don't have to involve all the rows.
   this can speed the query up!
** 4.22.9 IN and NOT IN
   SELECT id
   FROM stats
   WHERE position IN ('Manager', 'Staff')
   SELECT ownerid, 'is in both orders & antiques'
   FROM orders, antiques WHERE ownerid = buyerid
   UNION
   SELECT buyerid, 'is in antiques only'
   FROM antiques WHERE buyerid NOT IN (SELECT ownerid FROM orders)
** 4.22.10 EXISTS and ALL
   (Compatible: Mysql 4+)
   SELECT ownerfirstname, ownerlastname
   FROM owner
   WHERE EXISTS (SELECT * FROM antiques WHERE item = 'chair')
   SELECT buyerid, item
   FROM antiques
   WHERE price = ALL (SELECT price FROM antiques)

** UNION == UNION DISTINCT
   UNION ALL shows you duplicate values
** JOINS
*** cartesian joins you join every row of one table to every row of another table
*** left Joins
    Left joins allow one to combine the results from two different tables in one query.  It will only display show matching
    records.  In the following case, it will only display records where a kid's address is the same as his parents.

    SELECT * FROM girls CROSS JOIN boys

    SELECT first, last, parents.address from kids
    LEFT join parents on users.address = parents.address
** subqueries appear in the where or having clause
   a subquery can only product a single column of data as a result. Order by is not allowed, doesn't make sense

   to find girls with the same last name as the boys
   SELEct * from girls WHERE last = (SELEct last from boys)

   how find a coach a little better
   select ID from bowlers WHERE level IN ('3', '6')
   verses
   SELEct ID from bowlers WHERE level = '3' and level = '6'

   How to find all non coaches
   SELEct ID from bowlers WHERE level NOT IN ('3', '6')
** LIKE
   like has 2 special charters
   "%" represents any sequence of chars
   "_" means any 1 char

   SELEcT girls from bowlers WHERE last LIKE 'SM_TH'
   LIKE also works with numbers
   SELEct ID from bowlers WHERE ID LIKE '_2%'
   it will select 123434 or 223434 or 4222323
** SOUNDS LIKE can check if two words sound similiar! wow!
   SELEcT first from girls WHERE first SOUNDS LIKE 'karlie'
** regexp
   SELEct 'string' REGEXP pattern
** LOAD DATA INFILE '/path/to/file' INTO TABLE usbcData
** GREATEST (value1, value2, value3)
** LEAST (value1, value2, value3)
   returns the smallest value
** IF (val1, val2, val3)
   if val1 is true, then it returns value1. Otherwise it returns val3
** SELECT MAX(LENGTH(CONCAT(‘first_name‘, ' ', ‘last_name‘))) FROM ‘subscribers‘
** user defined variables! holy cow!
   You can write one query and save the results in a sql variable!  Then you can refer to that variable in the union clause!

   SELECT ID, first, last, schools.schoolID, level, @groupID := schools.groupID as groupID
   FROM users LEFT JOIN schools on users.schoolID=schools.schoolID
   WHERE (level = '3' OR level = '6' OR level = '9') AND (ID = '3')
   UNION ALL SELECT ID, first, last, schoolID, level, schoolID as groupID from users
   WHERE level = '2' AND schoolID = @groupID

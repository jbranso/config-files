\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename lua.info
@settitle Programming in Lua
@c %**end of header
@copying
Here are some basic instructions of Lua programming..

Copyright @copyright{} 2014

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

A copy of the license is also available from the Free Software
Foundation Web site at @url{http://www.gnu.org/licenses/fdl.html}.

@end quotation

The document was typeset with
@uref{http://www.texinfo.org/, GNU Texinfo}.

@end copying

@titlepage
@title Programming in Lua
@subtitle Here are some basic instructions of Lua programming.
@author  <joshua>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top, (dir), (dir)
@top Programming in Lua

@insertcopying
@end ifnottex

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Comments::
* Variables::
* Control Structures::
* Reservered Words::
* Functions::
* Control Structures::
* Copying This Manual::
* Index::
@end menu

@node Comments, Variables, Top, Top
@chapter Comments

Lua comments are two hyphens. @code{--}

@code{-- print("hello")} is a comment

Lua also allows for multi-line comments
--[[

this is also a comment

--]]

@c Update all node entries with `C-c C-u C-n'.
@c Insert new nodes with `C-c C-c n'.
@node Variables, Reservered Words, Comments, Top
@chapter Variables

Lua's variables have 8 basic types:

nil, boolean, number, string, userdata, function, thread, and table.

One can check the value of a variable quite easily:

a = 5
print(type(a))              --> number
a = "hello world"
print(type(a))              --> string
print(type(print))          --> function
print(type(type))           --> function
print(type(true))           --> boolean
print(type(nil))            --> nil
print(type(type(X)))        --> string

@code{x = 5} is a global variable.

@code{x = nil} deletes the global variable.
anywhere. Blocks in lua terminology are called chunks. 1 = 5 is a
block. Lines of code can optionally end with a semicolin; but you
don't have to do that.

do
        -- any variables defined here are local. This
        -- makes a chunk
end

@menu
* Sect. nil::                    Nil is useful for global variables
* Sect. boolean::                Boolean is for conditionals
* Sect. numbers::                Numbers are very helpful
@end menu

@node Sect. nil, Sect. boolean, Variables, Top

nil as a type is used to delete a global variabel. Also global
variables are assigned a nil variable initially.

@node Sect. boolean

The boolean type has two variables: @code{false} and
@code{true}. However, conditional statements consider
false and nil as false, and anything else true. Conditional statements
also condsider 0 and the empty string @code{""} as true.

@node Sect. numbers

Valid numbers are:

5     0.4     .5        0.3e-10  .5e20

If you try to add a string and a number, Lua will convert the string
into a number at run time. For example,

print("1 + 4")       --> 5
print("4" + 5)       --> 9

However @code{10 == "10"} will always be false, but
@code{tonumber("5") == 5 } will return true.

@node Sect. Functions
In lua functions are also types that can be stored in variables and
manipulated.


@node Control Structures
@chapter Control Structures

@menu
* Sect. If Statement
@end menu

@node Sect. If Statement
if a < 0 then
   a = 5
elseif a == 0 then
   a = 1
else
   print("What happened")
end

all values, except for false and nil are true

while <condition> do        --while condition is true,
      print("hello World")  --body
end


repeat
       print ("Hello World")  --body
until <condition>             --until condition is true repeat the body


There are two kinds of for statements numberic and generic.

Numberic

for var=<expression 1>, <expression 2>, <expression 3>  --expression 3 in the incremental expression
                                                        --it increases var
    print("Hello World")   --body
end

I believe expression two, is the thing that says repeat the body until expression 2 is false.

If you need to use the control variable: var, save it in another variable

for var=<expression 1>, <evpression 2>, <expression 3>
    print ("Hello world")
    copy_of_var = var
    <conditional testing copy_of_var>
end

ALSO, @emph{NEVER} change the value of var from inside the loop. If you need to terminate
the for statement, use break.

Generic for allows you to traverse through all values returned by an iterator function

for i, v in ipairs (a) do
    print(v)
end

The iterator function can be replaced by io.lines(), which will tranverse over lines
of a file, the pairs in a table with pairs(), and the words of a string string.gfind()

Also, @emph{NEVER} assign a value to the loop variables i and v.

@node Reservered Words
@chapter Reservered Words
    and       break     do        else      elseif
    end       false     for       function  if
    in        local     nil       not       or
    repeat    return    then      true      until
    while



@node Functions
@chapter Functions

Functions can return two values in lua.

a , b = funct(5)
A gets the first value funct returns and b gets the second value that
funct returns. How cool is that!?

@node Awesome WM stuff
@chapter Awesome WM stuff

require("random") in rc.lua, tells awesome to load the file
.config/awesome/random.lua

require("some_directory.random") in rc.lua, tells awesome to load the
file .config/awesome/some_directory/random.lua

Also

require("random.lua") will only execute the commands listed in
random.lua. It will not let you call functions you've defined in
random.lua. In order to use functions you've defined in random.lua,
you need to write
random = require("random.lua")

Then you can write

random.swap (a, b)

Also, if you want to use naughty in random.lua, include
local naughty = require("naughty")

@node Copying This Manual
@appendix Copying This Manual

@comment @menu
@comment * GNU Free Documentation License::  License for copying this manual.
@comment @end menu

@c Get fdl.texi from http://www.gnu.org/licenses/fdl.html
@include fdl.texi

@node Index
@unnumbered Index

@printindex cp

@bye

@c lua.texi ends here
